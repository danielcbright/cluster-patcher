#!/bin/sh

{{#if cfg.updates.enabled ~}}
function am_i_first () {
    echo "[RECONFIGURE] My IP is {{sys.ip}}, checking to see if I'm first to run updates..."
    sleep 1
    grep_toml=`grep -m 1 -A 2 "name =" {{pkg.svc_config_path}}/config.toml`
    if [[ "$grep_toml" == *"{{sys.hostname}}"* ]]; then
        grep_my_status=`grep -A 100 "{{sys.hostname}}" {{pkg.svc_config_path}}/config.toml | grep -m 1 'status =' | grep -vq -E 'next|done'`
        return $grep_my_status
    else
        return 1
    fi
}
function am_i_next () {
    # Am I the next node to update?
    echo "[RECONFIGURE] My IP is {{sys.ip}}, checking to see if I'm next to run updates..."
    sleep 1
    grep_my_status=`grep -A 100 "{{sys.hostname}}" {{pkg.svc_config_path}}/config.toml | grep -m 1 'status =' | grep -q next`
    return $grep_my_status
}
function am_i_last () {
    # Is there anything left to update after me?
    echo "[RECONFIGURE] My IP is {{sys.ip}}, checking to see if I'm last in line for updates..."
    sleep 1
    grep_toml=`grep -A 1000 "{{sys.hostname}}" {{pkg.svc_config_path}}/config.toml | grep nodes | grep -v "{{sys.hostname}}" | wc -l`
    return $grep_toml
}
function bump_version () {
    curr_number=`grep number /opt/update-tracking/config.toml | cut -d "=" -f2`
    new_version=$(( $curr_number + 1 ))
    sudo sed -i "s/number\s*=\s*$curr_number/number = $new_version/g" /opt/update-tracking/config.toml
    echo $new_version
}
function config_apply () {
    apply_version=$(bump_version)
    sudo hab config apply {{svc.service}}.{{svc.group}} $apply_version /opt/update-tracking/config.toml
    exit 0
}
function copy_config_toml () {
    sudo mkdir -p /opt/update-tracking
    sudo cp {{pkg.svc_config_path}}/config.toml /opt/update-tracking/
    sudo chmod 644 /opt/update-tracking/config.toml
}
function make_cmd_files () {
    touch {{../pkg.svc_config_path}}/{{../sys.hostname}}_start
    touch {{../pkg.svc_config_path}}/{{../sys.hostname}}_stop
    touch {{../pkg.svc_config_path}}/{{../sys.hostname}}_validate
}
function pop_cmd_files () {
    {{#each cfg.nodes ~}}
    if [ "{{name}}" == "{{../sys.hostname}}" ]; then
        {{#if stop ~}}
        cat <<EOF > {{../pkg.svc_config_path}}/{{../sys.hostname}}_stop
{{stop}}
EOF
        {{else}}
        cat <<EOF > {{../pkg.svc_config_path}}/{{../sys.hostname}}_stop
{{../cfg.commoncmds.stopcmd}}
EOF
        {{/if ~}}
        {{#if start ~}}
        cat <<EOF > {{../pkg.svc_config_path}}/{{../sys.hostname}}_start
{{start}}
EOF
        {{else}}
        cat <<EOF > {{../pkg.svc_config_path}}/{{../sys.hostname}}_start
{{../cfg.commoncmds.startcmd}}
EOF
        {{/if ~}}
        {{#if validate ~}}
        cat <<EOF > {{../pkg.svc_config_path}}/{{../sys.hostname}}_validate
{{validate}}
EOF
        {{else}}
        cat <<EOF > {{../pkg.svc_config_path}}/{{../sys.hostname}}_validate
{{../cfg.commoncmds.validatecmd}}
EOF
        {{/if ~}}
    fi
    {{/each ~}}
}
function run_stop () {
    sudo bash {{pkg.svc_config_path}}/{{sys.hostname}}_stop
}
function set_done_and_next () {
    my_status_line=`grep -A 100 -n "{{sys.hostname}}" /opt/update-tracking/config.toml | grep -m 1 "status =" | cut -d "-" -f1 | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }'`
    sudo sed -i ''"$my_status_line"'s/.*/status = "done"/' /opt/update-tracking/config.toml
    next_node=`grep -n -A 100 "{{sys.hostname}}" /opt/update-tracking/config.toml | grep -m 2 "name =" | grep -v ":" | sed 's/^.*name\s*=\s*//' | sed 's/]$//'`
    next_status_line=`grep -A 100 -n "$next_node" /opt/update-tracking/config.toml | grep -m 1 "status =" | cut -d "-" -f1 | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }'`
    sudo sed -i ''"$next_status_line"'s/.*/status = "next"/' /opt/update-tracking/config.toml
}
function set_done_and_complete () {
    my_status_line=`grep -A 100 -n "{{sys.hostname}}" /opt/update-tracking/config.toml | grep -m 1 "status =" | cut -d "-" -f1 | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }'`
    sudo sed -i ''"$my_status_line"'s/.*/status = "done"/' /opt/update-tracking/config.toml
}
function set_myself_next () {
    my_status_line=`grep -A 100 -n "{{sys.hostname}}" /opt/update-tracking/config.toml | grep -m 1 "status =" | cut -d "-" -f1 | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }'`
    sudo sed -i ''"$my_status_line"'s/.*/status = "next"/' /opt/update-tracking/config.toml
    config_apply
}
function should_i_reboot () {
    reboot_bool=`grep -A 100 "{{sys.hostname}}" /opt/update-tracking/config.toml | grep -m 1 'reboot ='`
    if [[ "$reboot_bool" == *"true"* ]]; then
        sudo touch /opt/update-tracking/REBOOTED
        sudo reboot
    else
        config_apply
    fi
}
function should_i_skip () {
    skip_status=`grep -A 100 "{{sys.hostname}}" {{pkg.svc_config_path}}/config.toml | grep -m 1 'skip ='`
    if [[ "$skip_status" == *"true"* ]]; then
        echo "[RECONFIGURE] This node is set to skip, marking done and moving to next..."
        if am_i_last; then
            bump_version
            set_done_and_complete
            config_apply
        else
            bump_version
            set_done_and_next
            config_apply
        fi
    fi
}

make_cmd_files
pop_cmd_files

if am_i_next; then
    copy_config_toml
    should_i_skip
    counter=10
    while [ $counter -gt 0 ]; do
        echo "[RECONFIGURE] Waiting $counter seconds for config to apply..."
        sleep 1
        counter=$(( $counter - 1 ))
    done
    echo "[RECONFIGURE] This node is set to update, commencing update operations now..."
    if am_i_last; then
        bump_version
        set_done_and_complete
    else
        bump_version
        set_done_and_next
    fi
    counter=10
    while [ $counter -gt 0 ]; do
        echo "[RECONFIGURE] Running stop command in $counter seconds..."
        sleep 1
        counter=$(( $counter - 1 ))
    done
    run_stop
    should_i_reboot
elif am_i_first; then
    echo "[RECONFIGURE] I am first!"
    copy_config_toml
    set_myself_next
fi

{{~/if}}
